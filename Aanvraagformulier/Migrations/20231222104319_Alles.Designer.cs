// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Aanvraagformulier.Data;

#nullable disable

namespace Aanvraagformulier.Migrations
{
    [DbContext(typeof(AanvraagformulierContext))]
    [Migration("20231222104319_Alles")]
    partial class Alles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Aanvraagformulier.Models.Afwezigheid", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<DateTime>("eindDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("gebruikerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("startDatum")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("gebruikerId");

                    b.ToTable("Afwezigheid", (string)null);
                });

            modelBuilder.Entity("Aanvraagformulier.Models.Begeleiding", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("gebruikerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("studiebezoekId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("gebruikerId");

                    b.HasIndex("studiebezoekId");

                    b.ToTable("Begeleiding", (string)null);
                });

            modelBuilder.Entity("Aanvraagformulier.Models.Bijlage", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int?>("Navormingid")
                        .HasColumnType("int");

                    b.Property<string>("bestandsNaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("studiebezoekId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Navormingid");

                    b.HasIndex("studiebezoekId");

                    b.ToTable("Bijlage", (string)null);
                });

            modelBuilder.Entity("Aanvraagformulier.Models.CustomUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Achternaam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Initialen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool?>("Verwijderd")
                        .HasColumnType("bit");

                    b.Property<string>("Voornaam")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Aanvraagformulier.Models.Foto", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("fotoAlbumId")
                        .HasColumnType("int");

                    b.Property<string>("naamFoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("thumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("fotoAlbumId");

                    b.ToTable("Foto", (string)null);
                });

            modelBuilder.Entity("Aanvraagformulier.Models.FotoAlbum", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("Afbeelding")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Studiebezoekid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("datum")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Studiebezoekid");

                    b.ToTable("FotoAlbum", (string)null);
                });

            modelBuilder.Entity("Aanvraagformulier.Models.GebruikerNavorming", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("gebruikerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("navormingId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("gebruikerId");

                    b.HasIndex("navormingId");

                    b.ToTable("GebruikerNavorming", (string)null);
                });

            modelBuilder.Entity("Aanvraagformulier.Models.Klas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("verwijderd")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Klas", (string)null);
                });

            modelBuilder.Entity("Aanvraagformulier.Models.KlasStudiebezoek", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("klasId")
                        .HasColumnType("int");

                    b.Property<int>("studiebezoekId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("klasId");

                    b.HasIndex("studiebezoekId");

                    b.ToTable("KlasStudiebezoek", (string)null);
                });

            modelBuilder.Entity("Aanvraagformulier.Models.Navorming", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<DateTime>("datum")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("eindUur")
                        .HasColumnType("datetime2");

                    b.Property<string>("gebruikerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isAfgewerkt")
                        .HasColumnType("bit");

                    b.Property<bool>("isAfgewezen")
                        .HasColumnType("bit");

                    b.Property<bool>("isGoedgekeurdDir")
                        .HasColumnType("bit");

                    b.Property<decimal>("kostprijs")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("opmerkingAfgewezen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("reden")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("startUur")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("gebruikerId");

                    b.ToTable("Navorming", (string)null);
                });

            modelBuilder.Entity("Aanvraagformulier.Models.Studiebezoek", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("aantalStudenten")
                        .HasColumnType("int");

                    b.Property<string>("afwezigeStudenten")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("datum")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("eindUur")
                        .HasColumnType("datetime2");

                    b.Property<string>("gebruikerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isAfgewerkt")
                        .HasColumnType("bit");

                    b.Property<bool>("isAfgewezen")
                        .HasColumnType("bit");

                    b.Property<bool>("isGoedgekeurdCo")
                        .HasColumnType("bit");

                    b.Property<bool>("isGoedgekeurdDir")
                        .HasColumnType("bit");

                    b.Property<decimal>("kostprijsStudiebezoek")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("kostprijsVervoer")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("opmerkingAfgewezen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("opmerkingen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("reden")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("startUur")
                        .HasColumnType("datetime2");

                    b.Property<int>("vakId")
                        .HasColumnType("int");

                    b.Property<bool>("vervoerAuto")
                        .HasColumnType("bit");

                    b.Property<bool>("vervoerBus")
                        .HasColumnType("bit");

                    b.Property<bool>("vervoerFiets")
                        .HasColumnType("bit");

                    b.Property<bool>("vervoerTeVoet")
                        .HasColumnType("bit");

                    b.Property<bool>("vervoerTram")
                        .HasColumnType("bit");

                    b.Property<bool>("vervoerTrein")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.HasIndex("gebruikerId");

                    b.HasIndex("vakId");

                    b.ToTable("Studiebezoek", (string)null);
                });

            modelBuilder.Entity("Aanvraagformulier.Models.Vak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Verwijderd")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Vak", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Aanvraagformulier.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Aanvraagformulier.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aanvraagformulier.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Aanvraagformulier.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aanvraagformulier.Models.Afwezigheid", b =>
                {
                    b.HasOne("Aanvraagformulier.Models.CustomUser", "CustomUser")
                        .WithMany("Afwezigheid")
                        .HasForeignKey("gebruikerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CustomUser");
                });

            modelBuilder.Entity("Aanvraagformulier.Models.Begeleiding", b =>
                {
                    b.HasOne("Aanvraagformulier.Models.CustomUser", "CustomUser")
                        .WithMany("Begeleiding")
                        .HasForeignKey("gebruikerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aanvraagformulier.Models.Studiebezoek", "Studiebezoek")
                        .WithMany("Begeleiding")
                        .HasForeignKey("studiebezoekId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CustomUser");

                    b.Navigation("Studiebezoek");
                });

            modelBuilder.Entity("Aanvraagformulier.Models.Bijlage", b =>
                {
                    b.HasOne("Aanvraagformulier.Models.Navorming", null)
                        .WithMany("Bijlagen")
                        .HasForeignKey("Navormingid");

                    b.HasOne("Aanvraagformulier.Models.Studiebezoek", "Studiebezoek")
                        .WithMany("Bijlage")
                        .HasForeignKey("studiebezoekId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Studiebezoek");
                });

            modelBuilder.Entity("Aanvraagformulier.Models.Foto", b =>
                {
                    b.HasOne("Aanvraagformulier.Models.FotoAlbum", "FotoAlbum")
                        .WithMany("Foto")
                        .HasForeignKey("fotoAlbumId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FotoAlbum");
                });

            modelBuilder.Entity("Aanvraagformulier.Models.FotoAlbum", b =>
                {
                    b.HasOne("Aanvraagformulier.Models.Studiebezoek", "Studiebezoek")
                        .WithMany("FotoAlbum")
                        .HasForeignKey("Studiebezoekid");

                    b.Navigation("Studiebezoek");
                });

            modelBuilder.Entity("Aanvraagformulier.Models.GebruikerNavorming", b =>
                {
                    b.HasOne("Aanvraagformulier.Models.CustomUser", "CustomUser")
                        .WithMany("GebruikerNavorming")
                        .HasForeignKey("gebruikerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aanvraagformulier.Models.Navorming", "Navorming")
                        .WithMany("GebruikerNavorming")
                        .HasForeignKey("navormingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CustomUser");

                    b.Navigation("Navorming");
                });

            modelBuilder.Entity("Aanvraagformulier.Models.KlasStudiebezoek", b =>
                {
                    b.HasOne("Aanvraagformulier.Models.Klas", "Klas")
                        .WithMany("KlasStudiebezoek")
                        .HasForeignKey("klasId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aanvraagformulier.Models.Studiebezoek", "Studiebezoek")
                        .WithMany("KlasStudiebezoek")
                        .HasForeignKey("studiebezoekId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Klas");

                    b.Navigation("Studiebezoek");
                });

            modelBuilder.Entity("Aanvraagformulier.Models.Navorming", b =>
                {
                    b.HasOne("Aanvraagformulier.Models.CustomUser", "CustomUser")
                        .WithMany("Navorming")
                        .HasForeignKey("gebruikerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CustomUser");
                });

            modelBuilder.Entity("Aanvraagformulier.Models.Studiebezoek", b =>
                {
                    b.HasOne("Aanvraagformulier.Models.CustomUser", "CustomUser")
                        .WithMany("Studiebezoek")
                        .HasForeignKey("gebruikerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aanvraagformulier.Models.Vak", "Vak")
                        .WithMany("Studiebezoek")
                        .HasForeignKey("vakId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CustomUser");

                    b.Navigation("Vak");
                });

            modelBuilder.Entity("Aanvraagformulier.Models.CustomUser", b =>
                {
                    b.Navigation("Afwezigheid");

                    b.Navigation("Begeleiding");

                    b.Navigation("GebruikerNavorming");

                    b.Navigation("Navorming");

                    b.Navigation("Studiebezoek");
                });

            modelBuilder.Entity("Aanvraagformulier.Models.FotoAlbum", b =>
                {
                    b.Navigation("Foto");
                });

            modelBuilder.Entity("Aanvraagformulier.Models.Klas", b =>
                {
                    b.Navigation("KlasStudiebezoek");
                });

            modelBuilder.Entity("Aanvraagformulier.Models.Navorming", b =>
                {
                    b.Navigation("Bijlagen");

                    b.Navigation("GebruikerNavorming");
                });

            modelBuilder.Entity("Aanvraagformulier.Models.Studiebezoek", b =>
                {
                    b.Navigation("Begeleiding");

                    b.Navigation("Bijlage");

                    b.Navigation("FotoAlbum");

                    b.Navigation("KlasStudiebezoek");
                });

            modelBuilder.Entity("Aanvraagformulier.Models.Vak", b =>
                {
                    b.Navigation("Studiebezoek");
                });
#pragma warning restore 612, 618
        }
    }
}
